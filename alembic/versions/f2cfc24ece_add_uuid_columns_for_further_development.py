"""Add uuid columns for further development

Revision ID: f2cfc24ece
Revises: 320f355c404
Create Date: 2014-12-31 18:09:09.723244

"""

# revision identifiers, used by Alembic.
revision = 'f2cfc24ece'
down_revision = '320f355c404'

from alembic import op
import sqlalchemy as sa

import datetime
from shortuuid import uuid

from sqlalchemy import (
    Column,
    Index,
    Integer,
    Text,
    DateTime
)

from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.orm import (
    scoped_session,
    sessionmaker,
)

# from zope.sqlalchemy import ZopeTransactionExtension

DBSession = scoped_session(sessionmaker())
Base = declarative_base()


class Post(Base):
    __tablename__ = 'posts'
    id = Column(Integer, primary_key=True, nullable=False)
    uuid = Column(Text, unique=True, nullable=False,
                  default=uuid())
    name = Column(Text, unique=True, nullable=False)
    created = Column(
        DateTime, default=datetime.datetime.utcnow, nullable=False)
    markdown = Column(Text)
    html = Column(Integer)


class Users(Base):
    __tablename__ = 'users'
    # Note userid will be an email address from mozilla persona
    id = Column(Integer, primary_key=True, nullable=False)
    uuid = Column(Text, unique=True, nullable=False,
                  default=uuid())
    userid = Column(Text, unique=True, nullable=False)
    group = Column(Text)


def upgrade():
    # commands auto generated by Alembic - please adjust! ###
    # 1. Create the columns
    op.add_column('posts', sa.Column('uuid', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('uuid', sa.Text(), nullable=True))

    # 2. Populate the columns
    DBSession.configure(bind=op.get_bind())
    for post in DBSession.query(Post):
        if not post.uuid or post.uuid == '':
            post.uuid = uuid()

    for user in DBSession.query(Users):
        if not user.uuid or user.uuid == '':
            user.uuid = uuid()
    DBSession.commit()

    # # 3. Update the columns so they aren't nullable
    # with op.batch_alter_table("posts", copy_from = Post()) as batch_op:
    # batch_op.alter_column('uuid', nullable = False)
    # with op.batch_alter_table("users", copy_from = Users()) as batch_op:
    # batch_op.alter_column('uuid', nullable = False)
    # end Alembic commands ###


def downgrade():
    # commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("posts") as batch_op:
        batch_op.drop_column('uuid')
    with op.batch_alter_table("users") as batch_op:
        batch_op.drop_column('uuid')
    # end Alembic commands ###
